//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use kaigan::types::U8PrefixString;
use kaigan::types::RemainderStr;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct CreateClass {
            /// Authority used to create a new class

    
              
          pub authority: solana_program::pubkey::Pubkey,
                /// New class account to be initialized

    
              
          pub class: solana_program::pubkey::Pubkey,
                /// System Program used to open our new class account

    
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl CreateClass {
  pub fn instruction(&self, args: CreateClassInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: CreateClassInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.class,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&CreateClassInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::SRS_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateClassInstructionData {
                    }

impl CreateClassInstructionData {
  pub fn new() -> Self {
    Self {
                                                    }
  }
}

impl Default for CreateClassInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateClassInstructionArgs {
            pub is_permissioned: bool,
                pub name: U8PrefixString,
                pub metadata: RemainderStr,
      }


/// Instruction builder for `CreateClass`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` authority
                ///   1. `[writable]` class
                ///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateClassBuilder {
            authority: Option<solana_program::pubkey::Pubkey>,
                class: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                  is_permissioned: Option<bool>,
                name: Option<U8PrefixString>,
                metadata: Option<RemainderStr>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateClassBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// Authority used to create a new class
#[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            /// New class account to be initialized
#[inline(always)]
    pub fn class(&mut self, class: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.class = Some(class);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
/// System Program used to open our new class account
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
              #[inline(always)]
      pub fn is_permissioned(&mut self, is_permissioned: bool) -> &mut Self {
        self.is_permissioned = Some(is_permissioned);
        self
      }
                #[inline(always)]
      pub fn name(&mut self, name: U8PrefixString) -> &mut Self {
        self.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn metadata(&mut self, metadata: RemainderStr) -> &mut Self {
        self.metadata = Some(metadata);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = CreateClass {
                              authority: self.authority.expect("authority is not set"),
                                        class: self.class.expect("class is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
          let args = CreateClassInstructionArgs {
                                            is_permissioned: self.is_permissioned.clone().expect("is_permissioned is not set"),
                                                                  name: self.name.clone().expect("name is not set"),
                                                                  metadata: self.metadata.clone().expect("metadata is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `create_class` CPI accounts.
  pub struct CreateClassCpiAccounts<'a, 'b> {
                  /// Authority used to create a new class

      
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                        /// New class account to be initialized

      
                    
              pub class: &'b solana_program::account_info::AccountInfo<'a>,
                        /// System Program used to open our new class account

      
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `create_class` CPI instruction.
pub struct CreateClassCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
            /// Authority used to create a new class

    
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                /// New class account to be initialized

    
              
          pub class: &'b solana_program::account_info::AccountInfo<'a>,
                /// System Program used to open our new class account

    
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: CreateClassInstructionArgs,
  }

impl<'a, 'b> CreateClassCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: CreateClassCpiAccounts<'a, 'b>,
              args: CreateClassInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              authority: accounts.authority,
              class: accounts.class,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.class.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&CreateClassInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::SRS_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authority.clone());
                        account_infos.push(self.class.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CreateClass` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` authority
                ///   1. `[writable]` class
          ///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateClassCpiBuilder<'a, 'b> {
  instruction: Box<CreateClassCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateClassCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CreateClassCpiBuilderInstruction {
      __program: program,
              authority: None,
              class: None,
              system_program: None,
                              is_permissioned: None,
                                name: None,
                                metadata: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// Authority used to create a new class
#[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      /// New class account to be initialized
#[inline(always)]
    pub fn class(&mut self, class: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.class = Some(class);
                    self
    }
      /// System Program used to open our new class account
#[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
              #[inline(always)]
      pub fn is_permissioned(&mut self, is_permissioned: bool) -> &mut Self {
        self.instruction.is_permissioned = Some(is_permissioned);
        self
      }
                #[inline(always)]
      pub fn name(&mut self, name: U8PrefixString) -> &mut Self {
        self.instruction.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn metadata(&mut self, metadata: RemainderStr) -> &mut Self {
        self.instruction.metadata = Some(metadata);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = CreateClassInstructionArgs {
                                            is_permissioned: self.instruction.is_permissioned.clone().expect("is_permissioned is not set"),
                                                                  name: self.instruction.name.clone().expect("name is not set"),
                                                                  metadata: self.instruction.metadata.clone().expect("metadata is not set"),
                                    };
        let instruction = CreateClassCpi {
        __program: self.instruction.__program,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          class: self.instruction.class.expect("class is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CreateClassCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                class: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                  is_permissioned: Option<bool>,
                name: Option<U8PrefixString>,
                metadata: Option<RemainderStr>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

