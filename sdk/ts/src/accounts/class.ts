/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export const CLASS_DISCRIMINATOR = 1;

export function getClassDiscriminatorBytes() {
  return getU8Encoder().encode(CLASS_DISCRIMINATOR);
}

export type Class = {
  authority: Address;
  isPermissioned: boolean;
  isFrozen: boolean;
  name: string;
  metadata: string;
};

export type ClassArgs = Class;

export function getClassEncoder(): Encoder<ClassArgs> {
  return getStructEncoder([
    ['authority', getAddressEncoder()],
    ['isPermissioned', getBooleanEncoder()],
    ['isFrozen', getBooleanEncoder()],
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU8Encoder())],
    ['metadata', getUtf8Encoder()],
  ]);
}

export function getClassDecoder(): Decoder<Class> {
  return getStructDecoder([
    ['authority', getAddressDecoder()],
    ['isPermissioned', getBooleanDecoder()],
    ['isFrozen', getBooleanDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU8Decoder())],
    ['metadata', getUtf8Decoder()],
  ]);
}

export function getClassCodec(): Codec<ClassArgs, Class> {
  return combineCodec(getClassEncoder(), getClassDecoder());
}

export function decodeClass<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Class, TAddress>;
export function decodeClass<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Class, TAddress>;
export function decodeClass<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Class, TAddress> | MaybeAccount<Class, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getClassDecoder()
  );
}

export async function fetchClass<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Class, TAddress>> {
  const maybeAccount = await fetchMaybeClass(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeClass<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Class, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeClass(maybeAccount);
}

export async function fetchAllClass(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Class>[]> {
  const maybeAccounts = await fetchAllMaybeClass(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeClass(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Class>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeClass(maybeAccount));
}
