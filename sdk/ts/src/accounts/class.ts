/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Class = Account<ClassAccountData>;

export type ClassAccountData = {
  discriminator: number;
  authority: PublicKey;
  isPermissioned: boolean;
  isFrozen: boolean;
  name: string;
  metadata: string;
};

export type ClassAccountDataArgs = {
  authority: PublicKey;
  isPermissioned: boolean;
  isFrozen: boolean;
  name: string;
  metadata: string;
};

export function getClassAccountDataSerializer(): Serializer<
  ClassAccountDataArgs,
  ClassAccountData
> {
  return mapSerializer<ClassAccountDataArgs, any, ClassAccountData>(
    struct<ClassAccountData>(
      [
        ['discriminator', u8()],
        ['authority', publicKeySerializer()],
        ['isPermissioned', bool()],
        ['isFrozen', bool()],
        ['name', string({ size: u8() })],
        ['metadata', string({ size: 'variable' })],
      ],
      { description: 'ClassAccountData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<ClassAccountDataArgs, ClassAccountData>;
}

export function deserializeClass(rawAccount: RpcAccount): Class {
  return deserializeAccount(rawAccount, getClassAccountDataSerializer());
}

export async function fetchClass(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Class> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Class');
  return deserializeClass(maybeAccount);
}

export async function safeFetchClass(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Class | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeClass(maybeAccount) : null;
}

export async function fetchAllClass(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Class[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Class');
    return deserializeClass(maybeAccount);
  });
}

export async function safeFetchAllClass(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Class[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeClass(maybeAccount as RpcAccount));
}

export function getClassGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'solanaRecordService',
    'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: number;
      authority: PublicKey;
      isPermissioned: boolean;
      isFrozen: boolean;
      name: string;
      metadata: string;
    }>({
      discriminator: [0, u8()],
      authority: [1, publicKeySerializer()],
      isPermissioned: [33, bool()],
      isFrozen: [34, bool()],
      name: [35, string({ size: u8() })],
      metadata: [null, string({ size: 'variable' })],
    })
    .deserializeUsing<Class>((account) => deserializeClass(account));
}
