/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Record = Account<RecordAccountData>;

export type RecordAccountData = {
  discriminator: number;
  class: PublicKey;
  ownerType: number;
  owner: PublicKey;
  isFrozen: boolean;
  expiry: bigint;
  seed: Uint8Array;
  data: Uint8Array;
};

export type RecordAccountDataArgs = {
  class: PublicKey;
  owner: PublicKey;
  isFrozen: boolean;
  expiry: number | bigint;
  seed: Uint8Array;
  data: Uint8Array;
};

export function getRecordAccountDataSerializer(): Serializer<
  RecordAccountDataArgs,
  RecordAccountData
> {
  return mapSerializer<RecordAccountDataArgs, any, RecordAccountData>(
    struct<RecordAccountData>(
      [
        ['discriminator', u8()],
        ['class', publicKeySerializer()],
        ['ownerType', u8()],
        ['owner', publicKeySerializer()],
        ['isFrozen', bool()],
        ['expiry', i64()],
        ['seed', bytes({ size: u8() })],
        ['data', bytes()],
      ],
      { description: 'RecordAccountData' }
    ),
    (value) => ({ ...value, discriminator: 2, ownerType: 0 })
  ) as Serializer<RecordAccountDataArgs, RecordAccountData>;
}

export function deserializeRecord(rawAccount: RpcAccount): Record {
  return deserializeAccount(rawAccount, getRecordAccountDataSerializer());
}

export async function fetchRecord(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Record> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Record');
  return deserializeRecord(maybeAccount);
}

export async function safeFetchRecord(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Record | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeRecord(maybeAccount) : null;
}

export async function fetchAllRecord(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Record[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Record');
    return deserializeRecord(maybeAccount);
  });
}

export async function safeFetchAllRecord(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Record[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeRecord(maybeAccount as RpcAccount));
}

export function getRecordGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'solanaRecordService',
    'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: number;
      class: PublicKey;
      ownerType: number;
      owner: PublicKey;
      isFrozen: boolean;
      expiry: number | bigint;
      seed: Uint8Array;
      data: Uint8Array;
    }>({
      discriminator: [0, u8()],
      class: [1, publicKeySerializer()],
      ownerType: [33, u8()],
      owner: [34, publicKeySerializer()],
      isFrozen: [66, bool()],
      expiry: [67, i64()],
      seed: [75, bytes({ size: u8() })],
      data: [null, bytes()],
    })
    .deserializeUsing<Record>((account) => deserializeRecord(account));
}
