/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export const RECORD_DISCRIMINATOR = 2;

export function getRecordDiscriminatorBytes() {
  return getU8Encoder().encode(RECORD_DISCRIMINATOR);
}

export type Record = {
  discriminator: number;
  class: Address;
  owner: Address;
  isFrozen: boolean;
  hasAuthorityExtension: boolean;
  expiry: bigint;
  name: string;
  metadata: string;
};

export type RecordArgs = {
  class: Address;
  owner: Address;
  isFrozen: boolean;
  hasAuthorityExtension: boolean;
  expiry: number | bigint;
  name: string;
  metadata: string;
};

export function getRecordEncoder(): Encoder<RecordArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['class', getAddressEncoder()],
      ['owner', getAddressEncoder()],
      ['isFrozen', getBooleanEncoder()],
      ['hasAuthorityExtension', getBooleanEncoder()],
      ['expiry', getI64Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU8Encoder())],
      ['metadata', getUtf8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 2 })
  );
}

export function getRecordDecoder(): Decoder<Record> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['class', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['isFrozen', getBooleanDecoder()],
    ['hasAuthorityExtension', getBooleanDecoder()],
    ['expiry', getI64Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU8Decoder())],
    ['metadata', getUtf8Decoder()],
  ]);
}

export function getRecordCodec(): Codec<RecordArgs, Record> {
  return combineCodec(getRecordEncoder(), getRecordDecoder());
}

export function decodeRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Record, TAddress>;
export function decodeRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Record, TAddress>;
export function decodeRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Record, TAddress> | MaybeAccount<Record, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRecordDecoder()
  );
}

export async function fetchRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Record, TAddress>> {
  const maybeAccount = await fetchMaybeRecord(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Record, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRecord(maybeAccount);
}

export async function fetchAllRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Record>[]> {
  const maybeAccounts = await fetchAllMaybeRecord(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Record>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRecord(maybeAccount));
}
