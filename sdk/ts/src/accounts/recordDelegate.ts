/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type RecordDelegate = Account<RecordDelegateAccountData>;

export type RecordDelegateAccountData = {
  discriminator: number;
  record: PublicKey;
  updateAuthority: PublicKey;
  freezeAuthority: PublicKey;
  transferAuthority: PublicKey;
  burnAuthority: PublicKey;
  authorityProgram: PublicKey;
};

export type RecordDelegateAccountDataArgs = {
  record: PublicKey;
  updateAuthority: PublicKey;
  freezeAuthority: PublicKey;
  transferAuthority: PublicKey;
  burnAuthority: PublicKey;
  authorityProgram: PublicKey;
};

export function getRecordDelegateAccountDataSerializer(): Serializer<
  RecordDelegateAccountDataArgs,
  RecordDelegateAccountData
> {
  return mapSerializer<
    RecordDelegateAccountDataArgs,
    any,
    RecordDelegateAccountData
  >(
    struct<RecordDelegateAccountData>(
      [
        ['discriminator', u8()],
        ['record', publicKeySerializer()],
        ['updateAuthority', publicKeySerializer()],
        ['freezeAuthority', publicKeySerializer()],
        ['transferAuthority', publicKeySerializer()],
        ['burnAuthority', publicKeySerializer()],
        ['authorityProgram', publicKeySerializer()],
      ],
      { description: 'RecordDelegateAccountData' }
    ),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<RecordDelegateAccountDataArgs, RecordDelegateAccountData>;
}

export function deserializeRecordDelegate(
  rawAccount: RpcAccount
): RecordDelegate {
  return deserializeAccount(
    rawAccount,
    getRecordDelegateAccountDataSerializer()
  );
}

export async function fetchRecordDelegate(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<RecordDelegate> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'RecordDelegate');
  return deserializeRecordDelegate(maybeAccount);
}

export async function safeFetchRecordDelegate(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<RecordDelegate | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeRecordDelegate(maybeAccount) : null;
}

export async function fetchAllRecordDelegate(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<RecordDelegate[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'RecordDelegate');
    return deserializeRecordDelegate(maybeAccount);
  });
}

export async function safeFetchAllRecordDelegate(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<RecordDelegate[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeRecordDelegate(maybeAccount as RpcAccount)
    );
}

export function getRecordDelegateGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'solanaRecordService',
    'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: number;
      record: PublicKey;
      updateAuthority: PublicKey;
      freezeAuthority: PublicKey;
      transferAuthority: PublicKey;
      burnAuthority: PublicKey;
      authorityProgram: PublicKey;
    }>({
      discriminator: [0, u8()],
      record: [1, publicKeySerializer()],
      updateAuthority: [33, publicKeySerializer()],
      freezeAuthority: [65, publicKeySerializer()],
      transferAuthority: [97, publicKeySerializer()],
      burnAuthority: [129, publicKeySerializer()],
      authorityProgram: [161, publicKeySerializer()],
    })
    .deserializeUsing<RecordDelegate>((account) =>
      deserializeRecordDelegate(account)
    );
}
