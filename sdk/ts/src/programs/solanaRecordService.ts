/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateClassInstruction,
  type ParsedCreateRecordInstruction,
  type ParsedFreezeClassInstruction,
  type ParsedUpdateClassMetadataInstruction,
  type ParsedUpdateRecordInstruction,
} from '../instructions';

export const SOLANA_RECORD_SERVICE_PROGRAM_ADDRESS =
  'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa' as Address<'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa'>;

export enum SolanaRecordServiceAccount {
  Class,
  Record,
}

export function identifySolanaRecordServiceAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolanaRecordServiceAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SolanaRecordServiceAccount.Class;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return SolanaRecordServiceAccount.Record;
  }
  throw new Error(
    'The provided account could not be identified as a solanaRecordService account.'
  );
}

export enum SolanaRecordServiceInstruction {
  CreateClass,
  UpdateClassMetadata,
  FreezeClass,
  CreateRecord,
  UpdateRecord,
}

export function identifySolanaRecordServiceInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolanaRecordServiceInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SolanaRecordServiceInstruction.CreateClass;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SolanaRecordServiceInstruction.UpdateClassMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return SolanaRecordServiceInstruction.FreezeClass;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return SolanaRecordServiceInstruction.CreateRecord;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return SolanaRecordServiceInstruction.UpdateRecord;
  }
  throw new Error(
    'The provided instruction could not be identified as a solanaRecordService instruction.'
  );
}

export type ParsedSolanaRecordServiceInstruction<
  TProgram extends string = 'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa',
> =
  | ({
      instructionType: SolanaRecordServiceInstruction.CreateClass;
    } & ParsedCreateClassInstruction<TProgram>)
  | ({
      instructionType: SolanaRecordServiceInstruction.UpdateClassMetadata;
    } & ParsedUpdateClassMetadataInstruction<TProgram>)
  | ({
      instructionType: SolanaRecordServiceInstruction.FreezeClass;
    } & ParsedFreezeClassInstruction<TProgram>)
  | ({
      instructionType: SolanaRecordServiceInstruction.CreateRecord;
    } & ParsedCreateRecordInstruction<TProgram>)
  | ({
      instructionType: SolanaRecordServiceInstruction.UpdateRecord;
    } & ParsedUpdateRecordInstruction<TProgram>);
