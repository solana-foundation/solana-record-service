/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateClassMetadataInstructionAccounts = {
  /** Authority used to update a class */
  authority: Signer;
  /** Account that will pay of get refunded for the class update */
  payer: Signer;
  /** Class account to be updated */
  class: PublicKey | Pda;
  /** System Program used to extend our class account */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type UpdateClassMetadataInstructionData = {
  discriminator: number;
  metadata: string;
};

export type UpdateClassMetadataInstructionDataArgs = { metadata: string };

export function getUpdateClassMetadataInstructionDataSerializer(): Serializer<
  UpdateClassMetadataInstructionDataArgs,
  UpdateClassMetadataInstructionData
> {
  return mapSerializer<
    UpdateClassMetadataInstructionDataArgs,
    any,
    UpdateClassMetadataInstructionData
  >(
    struct<UpdateClassMetadataInstructionData>(
      [
        ['discriminator', u8()],
        ['metadata', string({ size: 'variable' })],
      ],
      { description: 'UpdateClassMetadataInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<
    UpdateClassMetadataInstructionDataArgs,
    UpdateClassMetadataInstructionData
  >;
}

// Args.
export type UpdateClassMetadataInstructionArgs =
  UpdateClassMetadataInstructionDataArgs;

// Instruction.
export function updateClassMetadata(
  context: Pick<Context, 'programs'>,
  input: UpdateClassMetadataInstructionAccounts &
    UpdateClassMetadataInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solanaRecordService',
    'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa'
  );

  // Accounts.
  const resolvedAccounts = {
    authority: {
      index: 0,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    payer: {
      index: 1,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    class: {
      index: 2,
      isWritable: true as boolean,
      value: input.class ?? null,
    },
    systemProgram: {
      index: 3,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateClassMetadataInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateClassMetadataInstructionDataSerializer().serialize(
    resolvedArgs as UpdateClassMetadataInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
