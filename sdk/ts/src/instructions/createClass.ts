/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SOLANA_RECORD_SERVICE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_CLASS_DISCRIMINATOR = 0;

export function getCreateClassDiscriminatorBytes() {
  return getU8Encoder().encode(CREATE_CLASS_DISCRIMINATOR);
}

export type CreateClassInstruction<
  TProgram extends string = typeof SOLANA_RECORD_SERVICE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountClass extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountClass extends string
        ? WritableAccount<TAccountClass>
        : TAccountClass,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateClassInstructionData = {
  discriminator: number;
  isPermissioned: boolean;
  isFrozen: boolean;
  name: string;
  metadata: string;
};

export type CreateClassInstructionDataArgs = {
  isPermissioned: boolean;
  isFrozen: boolean;
  name: string;
  metadata: string;
};

export function getCreateClassInstructionDataEncoder(): Encoder<CreateClassInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['isPermissioned', getBooleanEncoder()],
      ['isFrozen', getBooleanEncoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU8Encoder())],
      ['metadata', getUtf8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 0 })
  );
}

export function getCreateClassInstructionDataDecoder(): Decoder<CreateClassInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['isPermissioned', getBooleanDecoder()],
    ['isFrozen', getBooleanDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU8Decoder())],
    ['metadata', getUtf8Decoder()],
  ]);
}

export function getCreateClassInstructionDataCodec(): Codec<
  CreateClassInstructionDataArgs,
  CreateClassInstructionData
> {
  return combineCodec(
    getCreateClassInstructionDataEncoder(),
    getCreateClassInstructionDataDecoder()
  );
}

export type CreateClassInput<
  TAccountAuthority extends string = string,
  TAccountClass extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Authority used to create a new class */
  authority: TransactionSigner<TAccountAuthority>;
  /** New class account to be initialized */
  class: Address<TAccountClass>;
  /** System Program used to open our new class account */
  systemProgram?: Address<TAccountSystemProgram>;
  isPermissioned: CreateClassInstructionDataArgs['isPermissioned'];
  isFrozen: CreateClassInstructionDataArgs['isFrozen'];
  name: CreateClassInstructionDataArgs['name'];
  metadata: CreateClassInstructionDataArgs['metadata'];
};

export function getCreateClassInstruction<
  TAccountAuthority extends string,
  TAccountClass extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof SOLANA_RECORD_SERVICE_PROGRAM_ADDRESS,
>(
  input: CreateClassInput<
    TAccountAuthority,
    TAccountClass,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateClassInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountClass,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SOLANA_RECORD_SERVICE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    class: { value: input.class ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.class),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateClassInstructionDataEncoder().encode(
      args as CreateClassInstructionDataArgs
    ),
  } as CreateClassInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountClass,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateClassInstruction<
  TProgram extends string = typeof SOLANA_RECORD_SERVICE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Authority used to create a new class */
    authority: TAccountMetas[0];
    /** New class account to be initialized */
    class: TAccountMetas[1];
    /** System Program used to open our new class account */
    systemProgram: TAccountMetas[2];
  };
  data: CreateClassInstructionData;
};

export function parseCreateClassInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateClassInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      class: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateClassInstructionDataDecoder().decode(instruction.data),
  };
}
