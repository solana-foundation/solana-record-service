/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import { Metadata, MetadataArgs, getMetadataSerializer } from '../types';

// Accounts.
export type CreateRecordTokenizableInstructionAccounts = {
  /** Owner of the new record */
  owner: Signer;
  /** Account that will pay for the record account */
  payer: Signer;
  /** Class account for the record to be created */
  class: PublicKey | Pda;
  /** Record account to be created */
  record: PublicKey | Pda;
  /** System Program used to create our record account */
  systemProgram?: PublicKey | Pda;
  /** Optional authority for permissioned classes */
  authority?: Signer;
};

// Data.
export type CreateRecordTokenizableInstructionData = {
  discriminator: number;
  expiration: bigint;
  seed: Uint8Array;
  metadata: Metadata;
};

export type CreateRecordTokenizableInstructionDataArgs = {
  expiration: number | bigint;
  seed: Uint8Array;
  metadata: MetadataArgs;
};

export function getCreateRecordTokenizableInstructionDataSerializer(): Serializer<
  CreateRecordTokenizableInstructionDataArgs,
  CreateRecordTokenizableInstructionData
> {
  return mapSerializer<
    CreateRecordTokenizableInstructionDataArgs,
    any,
    CreateRecordTokenizableInstructionData
  >(
    struct<CreateRecordTokenizableInstructionData>(
      [
        ['discriminator', u8()],
        ['expiration', i64()],
        ['seed', bytes({ size: u8() })],
        ['metadata', getMetadataSerializer()],
      ],
      { description: 'CreateRecordTokenizableInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<
    CreateRecordTokenizableInstructionDataArgs,
    CreateRecordTokenizableInstructionData
  >;
}

// Args.
export type CreateRecordTokenizableInstructionArgs =
  CreateRecordTokenizableInstructionDataArgs;

// Instruction.
export function createRecordTokenizable(
  context: Pick<Context, 'programs'>,
  input: CreateRecordTokenizableInstructionAccounts &
    CreateRecordTokenizableInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solanaRecordService',
    'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa'
  );

  // Accounts.
  const resolvedAccounts = {
    owner: {
      index: 0,
      isWritable: false as boolean,
      value: input.owner ?? null,
    },
    payer: {
      index: 1,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    class: {
      index: 2,
      isWritable: true as boolean,
      value: input.class ?? null,
    },
    record: {
      index: 3,
      isWritable: true as boolean,
      value: input.record ?? null,
    },
    systemProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    authority: {
      index: 5,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateRecordTokenizableInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCreateRecordTokenizableInstructionDataSerializer().serialize(
    resolvedArgs as CreateRecordTokenizableInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
