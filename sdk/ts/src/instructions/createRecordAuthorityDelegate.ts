/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CreateRecordAuthorityDelegateInstructionAccounts = {
  /** Authority used to create a delegate */
  authority: Signer;
  /** Record account to create delegate for */
  record: PublicKey | Pda;
  /** Delegate for record account */
  delegate: PublicKey | Pda;
  /** System Program used to extend our record account */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateRecordAuthorityDelegateInstructionData = {
  discriminator: number;
  updateAuthority: PublicKey;
  freezeAuthority: PublicKey;
  transferAuthority: PublicKey;
  burnAuthority: PublicKey;
  authorityProgram: PublicKey;
};

export type CreateRecordAuthorityDelegateInstructionDataArgs = {
  updateAuthority: PublicKey;
  freezeAuthority: PublicKey;
  transferAuthority: PublicKey;
  burnAuthority: PublicKey;
  authorityProgram: PublicKey;
};

export function getCreateRecordAuthorityDelegateInstructionDataSerializer(): Serializer<
  CreateRecordAuthorityDelegateInstructionDataArgs,
  CreateRecordAuthorityDelegateInstructionData
> {
  return mapSerializer<
    CreateRecordAuthorityDelegateInstructionDataArgs,
    any,
    CreateRecordAuthorityDelegateInstructionData
  >(
    struct<CreateRecordAuthorityDelegateInstructionData>(
      [
        ['discriminator', u8()],
        ['updateAuthority', publicKeySerializer()],
        ['freezeAuthority', publicKeySerializer()],
        ['transferAuthority', publicKeySerializer()],
        ['burnAuthority', publicKeySerializer()],
        ['authorityProgram', publicKeySerializer()],
      ],
      { description: 'CreateRecordAuthorityDelegateInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 8 })
  ) as Serializer<
    CreateRecordAuthorityDelegateInstructionDataArgs,
    CreateRecordAuthorityDelegateInstructionData
  >;
}

// Args.
export type CreateRecordAuthorityDelegateInstructionArgs =
  CreateRecordAuthorityDelegateInstructionDataArgs;

// Instruction.
export function createRecordAuthorityDelegate(
  context: Pick<Context, 'programs'>,
  input: CreateRecordAuthorityDelegateInstructionAccounts &
    CreateRecordAuthorityDelegateInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solanaRecordService',
    'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa'
  );

  // Accounts.
  const resolvedAccounts = {
    authority: {
      index: 0,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    record: {
      index: 1,
      isWritable: true as boolean,
      value: input.record ?? null,
    },
    delegate: {
      index: 2,
      isWritable: true as boolean,
      value: input.delegate ?? null,
    },
    systemProgram: {
      index: 3,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateRecordAuthorityDelegateInstructionArgs = {
    ...input,
  };

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data =
    getCreateRecordAuthorityDelegateInstructionDataSerializer().serialize(
      resolvedArgs as CreateRecordAuthorityDelegateInstructionDataArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
