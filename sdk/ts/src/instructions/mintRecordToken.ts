/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MintRecordTokenInstructionAccounts = {
  /** Authority used to create a delegate */
  authority: Signer;
  /** Record account to create delegate for */
  record: PublicKey | Pda;
  /** Mint account for record token */
  mint: PublicKey | Pda;
  /** Token Account for record token */
  tokenAccount: PublicKey | Pda;
  /** Associated Token Program used to create our token */
  associatedTokenProgram?: PublicKey | Pda;
  /** Token2022 Program used to create our token */
  token2022?: PublicKey | Pda;
  /** System Program used to create our token */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type MintRecordTokenInstructionData = { discriminator: number };

export type MintRecordTokenInstructionDataArgs = {};

export function getMintRecordTokenInstructionDataSerializer(): Serializer<
  MintRecordTokenInstructionDataArgs,
  MintRecordTokenInstructionData
> {
  return mapSerializer<
    MintRecordTokenInstructionDataArgs,
    any,
    MintRecordTokenInstructionData
  >(
    struct<MintRecordTokenInstructionData>([['discriminator', u8()]], {
      description: 'MintRecordTokenInstructionData',
    }),
    (value) => ({ ...value, discriminator: 11 })
  ) as Serializer<
    MintRecordTokenInstructionDataArgs,
    MintRecordTokenInstructionData
  >;
}

// Instruction.
export function mintRecordToken(
  context: Pick<Context, 'programs'>,
  input: MintRecordTokenInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solanaRecordService',
    'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa'
  );

  // Accounts.
  const resolvedAccounts = {
    authority: {
      index: 0,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    record: {
      index: 1,
      isWritable: true as boolean,
      value: input.record ?? null,
    },
    mint: { index: 2, isWritable: true as boolean, value: input.mint ?? null },
    tokenAccount: {
      index: 3,
      isWritable: true as boolean,
      value: input.tokenAccount ?? null,
    },
    associatedTokenProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    token2022: {
      index: 5,
      isWritable: false as boolean,
      value: input.token2022 ?? null,
    },
    systemProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'associatedTokenProgram',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.token2022.value) {
    resolvedAccounts.token2022.value = context.programs.getPublicKey(
      'token2022',
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'
    );
    resolvedAccounts.token2022.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMintRecordTokenInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
