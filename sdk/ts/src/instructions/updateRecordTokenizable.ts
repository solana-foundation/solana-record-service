/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateRecordTokenizableInstructionAccounts = {
  /** Record owner or class authority for permissioned classes */
  authority: Signer;
  /** Record account to be updated */
  record: PublicKey | Pda;
  /** System Program used to extend our record account */
  systemProgram?: PublicKey | Pda;
  /** Class account of the record */
  class?: PublicKey | Pda;
};

// Data.
export type UpdateRecordTokenizableInstructionData = {
  discriminator: number;
  /** Token22 Metadata Extension compatible Metadata format */
  metadata: {
    name: string;
    symbol: string;
    uri: string;
    /** Additional metadata for Token22 Metadata Extension compatible Metadata format */
    additionalMetadata: Array<{ label: string; value: string }>;
  };
};

export type UpdateRecordTokenizableInstructionDataArgs = {
  /** Token22 Metadata Extension compatible Metadata format */
  metadata: {
    name: string;
    symbol?: string;
    uri: string;
    /** Additional metadata for Token22 Metadata Extension compatible Metadata format */
    additionalMetadata: Array<{ label: string; value: string }>;
  };
};

export function getUpdateRecordTokenizableInstructionDataSerializer(): Serializer<
  UpdateRecordTokenizableInstructionDataArgs,
  UpdateRecordTokenizableInstructionData
> {
  return mapSerializer<
    UpdateRecordTokenizableInstructionDataArgs,
    any,
    UpdateRecordTokenizableInstructionData
  >(
    struct<UpdateRecordTokenizableInstructionData>(
      [
        ['discriminator', u8()],
        [
          'metadata',
          mapSerializer<any, any, any>(
            struct<any>([
              ['name', string()],
              ['symbol', string()],
              ['uri', string()],
              [
                'additionalMetadata',
                array(
                  struct<any>([
                    ['label', string()],
                    ['value', string()],
                  ])
                ),
              ],
            ]),
            (value) => ({ ...value, symbol: value.symbol ?? 'SRS' })
          ),
        ],
      ],
      { description: 'UpdateRecordTokenizableInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 4 })
  ) as Serializer<
    UpdateRecordTokenizableInstructionDataArgs,
    UpdateRecordTokenizableInstructionData
  >;
}

// Args.
export type UpdateRecordTokenizableInstructionArgs =
  UpdateRecordTokenizableInstructionDataArgs;

// Instruction.
export function updateRecordTokenizable(
  context: Pick<Context, 'programs'>,
  input: UpdateRecordTokenizableInstructionAccounts &
    UpdateRecordTokenizableInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solanaRecordService',
    'srsUi2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPa'
  );

  // Accounts.
  const resolvedAccounts = {
    authority: {
      index: 0,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    record: {
      index: 1,
      isWritable: true as boolean,
      value: input.record ?? null,
    },
    systemProgram: {
      index: 2,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    class: {
      index: 3,
      isWritable: false as boolean,
      value: input.class ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateRecordTokenizableInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateRecordTokenizableInstructionDataSerializer().serialize(
    resolvedArgs as UpdateRecordTokenizableInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
