//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct DeleteRecord {
    /// Record owner or class authority for permissioned classes
    pub authority: solana_program::pubkey::Pubkey,
    /// Account that will get refunded for the record deletion
    pub payer: solana_program::pubkey::Pubkey,
    /// Record account to be updated
    pub record: solana_program::pubkey::Pubkey,
    /// Class account of the record
    pub class: Option<solana_program::pubkey::Pubkey>,
}

impl DeleteRecord {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.record,
            false,
        ));
        if let Some(class) = self.class {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                class, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLANA_RECORD_SERVICE_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&DeleteRecordInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::SOLANA_RECORD_SERVICE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DeleteRecordInstructionData {
    discriminator: u8,
}

impl DeleteRecordInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 6 }
    }
}

impl Default for DeleteRecordInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `DeleteRecord`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[writable, signer]` payer
///   2. `[writable]` record
///   3. `[optional]` class
#[derive(Clone, Debug, Default)]
pub struct DeleteRecordBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    record: Option<solana_program::pubkey::Pubkey>,
    class: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DeleteRecordBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Record owner or class authority for permissioned classes
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Account that will get refunded for the record deletion
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// Record account to be updated
    #[inline(always)]
    pub fn record(&mut self, record: solana_program::pubkey::Pubkey) -> &mut Self {
        self.record = Some(record);
        self
    }
    /// `[optional account]`
    /// Class account of the record
    #[inline(always)]
    pub fn class(&mut self, class: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.class = class;
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = DeleteRecord {
            authority: self.authority.expect("authority is not set"),
            payer: self.payer.expect("payer is not set"),
            record: self.record.expect("record is not set"),
            class: self.class,
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `delete_record` CPI accounts.
pub struct DeleteRecordCpiAccounts<'a, 'b> {
    /// Record owner or class authority for permissioned classes
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that will get refunded for the record deletion
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Record account to be updated
    pub record: &'b solana_program::account_info::AccountInfo<'a>,
    /// Class account of the record
    pub class: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `delete_record` CPI instruction.
pub struct DeleteRecordCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Record owner or class authority for permissioned classes
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that will get refunded for the record deletion
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Record account to be updated
    pub record: &'b solana_program::account_info::AccountInfo<'a>,
    /// Class account of the record
    pub class: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

impl<'a, 'b> DeleteRecordCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: DeleteRecordCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            payer: accounts.payer,
            record: accounts.record,
            class: accounts.class,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.record.key,
            false,
        ));
        if let Some(class) = self.class {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *class.key, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLANA_RECORD_SERVICE_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&DeleteRecordInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SOLANA_RECORD_SERVICE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.record.clone());
        if let Some(class) = self.class {
            account_infos.push(class.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DeleteRecord` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[writable, signer]` payer
///   2. `[writable]` record
///   3. `[optional]` class
#[derive(Clone, Debug)]
pub struct DeleteRecordCpiBuilder<'a, 'b> {
    instruction: Box<DeleteRecordCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DeleteRecordCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DeleteRecordCpiBuilderInstruction {
            __program: program,
            authority: None,
            payer: None,
            record: None,
            class: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Record owner or class authority for permissioned classes
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Account that will get refunded for the record deletion
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// Record account to be updated
    #[inline(always)]
    pub fn record(
        &mut self,
        record: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.record = Some(record);
        self
    }
    /// `[optional account]`
    /// Class account of the record
    #[inline(always)]
    pub fn class(
        &mut self,
        class: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.class = class;
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = DeleteRecordCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            record: self.instruction.record.expect("record is not set"),

            class: self.instruction.class,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DeleteRecordCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    class: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
