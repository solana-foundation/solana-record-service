//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use kaigan::types::RemainderStr;
use kaigan::types::U8PrefixString;

/// Accounts.
#[derive(Debug)]
pub struct CreateRecord {
    /// Owner of the new record
    pub owner: solana_program::pubkey::Pubkey,
    /// Account that will pay for the record account
    pub payer: solana_program::pubkey::Pubkey,
    /// Class account for the record to be created
    pub class: solana_program::pubkey::Pubkey,
    /// Record account to be created
    pub record: solana_program::pubkey::Pubkey,
    /// System Program used to create our record account
    pub system_program: solana_program::pubkey::Pubkey,
    /// Optional authority for permissioned classes
    pub authority: Option<solana_program::pubkey::Pubkey>,
}

impl CreateRecord {
    pub fn instruction(
        &self,
        args: CreateRecordInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateRecordInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.class, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.record,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        if let Some(authority) = self.authority {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                authority, true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLANA_RECORD_SERVICE_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateRecordInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SOLANA_RECORD_SERVICE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateRecordInstructionData {
    discriminator: u8,
}

impl CreateRecordInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 3 }
    }
}

impl Default for CreateRecordInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateRecordInstructionArgs {
    pub expiration: i64,
    pub name: U8PrefixString,
    pub data: RemainderStr,
}

/// Instruction builder for `CreateRecord`.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[writable, signer]` payer
///   2. `[writable]` class
///   3. `[writable]` record
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   5. `[signer, optional]` authority
#[derive(Clone, Debug, Default)]
pub struct CreateRecordBuilder {
    owner: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    class: Option<solana_program::pubkey::Pubkey>,
    record: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    expiration: Option<i64>,
    name: Option<U8PrefixString>,
    data: Option<RemainderStr>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateRecordBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Owner of the new record
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// Account that will pay for the record account
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// Class account for the record to be created
    #[inline(always)]
    pub fn class(&mut self, class: solana_program::pubkey::Pubkey) -> &mut Self {
        self.class = Some(class);
        self
    }
    /// Record account to be created
    #[inline(always)]
    pub fn record(&mut self, record: solana_program::pubkey::Pubkey) -> &mut Self {
        self.record = Some(record);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System Program used to create our record account
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account]`
    /// Optional authority for permissioned classes
    #[inline(always)]
    pub fn authority(&mut self, authority: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.authority = authority;
        self
    }
    #[inline(always)]
    pub fn expiration(&mut self, expiration: i64) -> &mut Self {
        self.expiration = Some(expiration);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: U8PrefixString) -> &mut Self {
        self.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn data(&mut self, data: RemainderStr) -> &mut Self {
        self.data = Some(data);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateRecord {
            owner: self.owner.expect("owner is not set"),
            payer: self.payer.expect("payer is not set"),
            class: self.class.expect("class is not set"),
            record: self.record.expect("record is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            authority: self.authority,
        };
        let args = CreateRecordInstructionArgs {
            expiration: self.expiration.clone().expect("expiration is not set"),
            name: self.name.clone().expect("name is not set"),
            data: self.data.clone().expect("data is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_record` CPI accounts.
pub struct CreateRecordCpiAccounts<'a, 'b> {
    /// Owner of the new record
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that will pay for the record account
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Class account for the record to be created
    pub class: &'b solana_program::account_info::AccountInfo<'a>,
    /// Record account to be created
    pub record: &'b solana_program::account_info::AccountInfo<'a>,
    /// System Program used to create our record account
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Optional authority for permissioned classes
    pub authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `create_record` CPI instruction.
pub struct CreateRecordCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Owner of the new record
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that will pay for the record account
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Class account for the record to be created
    pub class: &'b solana_program::account_info::AccountInfo<'a>,
    /// Record account to be created
    pub record: &'b solana_program::account_info::AccountInfo<'a>,
    /// System Program used to create our record account
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Optional authority for permissioned classes
    pub authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: CreateRecordInstructionArgs,
}

impl<'a, 'b> CreateRecordCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateRecordCpiAccounts<'a, 'b>,
        args: CreateRecordInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            payer: accounts.payer,
            class: accounts.class,
            record: accounts.record,
            system_program: accounts.system_program,
            authority: accounts.authority,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.class.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.record.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        if let Some(authority) = self.authority {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *authority.key,
                true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLANA_RECORD_SERVICE_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateRecordInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SOLANA_RECORD_SERVICE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.class.clone());
        account_infos.push(self.record.clone());
        account_infos.push(self.system_program.clone());
        if let Some(authority) = self.authority {
            account_infos.push(authority.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateRecord` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[writable, signer]` payer
///   2. `[writable]` class
///   3. `[writable]` record
///   4. `[]` system_program
///   5. `[signer, optional]` authority
#[derive(Clone, Debug)]
pub struct CreateRecordCpiBuilder<'a, 'b> {
    instruction: Box<CreateRecordCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateRecordCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateRecordCpiBuilderInstruction {
            __program: program,
            owner: None,
            payer: None,
            class: None,
            record: None,
            system_program: None,
            authority: None,
            expiration: None,
            name: None,
            data: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Owner of the new record
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// Account that will pay for the record account
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// Class account for the record to be created
    #[inline(always)]
    pub fn class(&mut self, class: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.class = Some(class);
        self
    }
    /// Record account to be created
    #[inline(always)]
    pub fn record(
        &mut self,
        record: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.record = Some(record);
        self
    }
    /// System Program used to create our record account
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// `[optional account]`
    /// Optional authority for permissioned classes
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.authority = authority;
        self
    }
    #[inline(always)]
    pub fn expiration(&mut self, expiration: i64) -> &mut Self {
        self.instruction.expiration = Some(expiration);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: U8PrefixString) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn data(&mut self, data: RemainderStr) -> &mut Self {
        self.instruction.data = Some(data);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateRecordInstructionArgs {
            expiration: self
                .instruction
                .expiration
                .clone()
                .expect("expiration is not set"),
            name: self.instruction.name.clone().expect("name is not set"),
            data: self.instruction.data.clone().expect("data is not set"),
        };
        let instruction = CreateRecordCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            class: self.instruction.class.expect("class is not set"),

            record: self.instruction.record.expect("record is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            authority: self.instruction.authority,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateRecordCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    class: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    expiration: Option<i64>,
    name: Option<U8PrefixString>,
    data: Option<RemainderStr>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
