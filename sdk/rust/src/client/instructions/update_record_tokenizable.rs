//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::types::Metadata;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct UpdateRecordTokenizable {
    /// Record owner or class authority for permissioned classes
    pub authority: solana_pubkey::Pubkey,
    /// Account that will pay of get refunded for the record update
    pub payer: solana_pubkey::Pubkey,
    /// Record account to be updated
    pub record: solana_pubkey::Pubkey,
    /// System Program used to extend our record account
    pub system_program: solana_pubkey::Pubkey,
    /// Class account of the record
    pub class: Option<solana_pubkey::Pubkey>,
}

impl UpdateRecordTokenizable {
    pub fn instruction(
        &self,
        args: UpdateRecordTokenizableInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateRecordTokenizableInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.authority, true));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new(self.record, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        if let Some(class) = self.class {
            accounts.push(solana_instruction::AccountMeta::new_readonly(class, false));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::SOLANA_RECORD_SERVICE_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&UpdateRecordTokenizableInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SOLANA_RECORD_SERVICE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateRecordTokenizableInstructionData {
    discriminator: u8,
}

impl UpdateRecordTokenizableInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 4 }
    }
}

impl Default for UpdateRecordTokenizableInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateRecordTokenizableInstructionArgs {
    pub metadata: Metadata,
}

/// Instruction builder for `UpdateRecordTokenizable`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[writable, signer]` payer
///   2. `[writable]` record
///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   4. `[optional]` class
#[derive(Clone, Debug, Default)]
pub struct UpdateRecordTokenizableBuilder {
    authority: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    record: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    class: Option<solana_pubkey::Pubkey>,
    metadata: Option<Metadata>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl UpdateRecordTokenizableBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Record owner or class authority for permissioned classes
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Account that will pay of get refunded for the record update
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// Record account to be updated
    #[inline(always)]
    pub fn record(&mut self, record: solana_pubkey::Pubkey) -> &mut Self {
        self.record = Some(record);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System Program used to extend our record account
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account]`
    /// Class account of the record
    #[inline(always)]
    pub fn class(&mut self, class: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.class = class;
        self
    }
    #[inline(always)]
    pub fn metadata(&mut self, metadata: Metadata) -> &mut Self {
        self.metadata = Some(metadata);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = UpdateRecordTokenizable {
            authority: self.authority.expect("authority is not set"),
            payer: self.payer.expect("payer is not set"),
            record: self.record.expect("record is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            class: self.class,
        };
        let args = UpdateRecordTokenizableInstructionArgs {
            metadata: self.metadata.clone().expect("metadata is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_record_tokenizable` CPI accounts.
pub struct UpdateRecordTokenizableCpiAccounts<'a, 'b> {
    /// Record owner or class authority for permissioned classes
    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Account that will pay of get refunded for the record update
    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// Record account to be updated
    pub record: &'b solana_account_info::AccountInfo<'a>,
    /// System Program used to extend our record account
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// Class account of the record
    pub class: Option<&'b solana_account_info::AccountInfo<'a>>,
}

/// `update_record_tokenizable` CPI instruction.
pub struct UpdateRecordTokenizableCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// Record owner or class authority for permissioned classes
    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Account that will pay of get refunded for the record update
    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// Record account to be updated
    pub record: &'b solana_account_info::AccountInfo<'a>,
    /// System Program used to extend our record account
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// Class account of the record
    pub class: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: UpdateRecordTokenizableInstructionArgs,
}

impl<'a, 'b> UpdateRecordTokenizableCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: UpdateRecordTokenizableCpiAccounts<'a, 'b>,
        args: UpdateRecordTokenizableInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            payer: accounts.payer,
            record: accounts.record,
            system_program: accounts.system_program,
            class: accounts.class,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.record.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        if let Some(class) = self.class {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *class.key, false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::SOLANA_RECORD_SERVICE_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&UpdateRecordTokenizableInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SOLANA_RECORD_SERVICE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.record.clone());
        account_infos.push(self.system_program.clone());
        if let Some(class) = self.class {
            account_infos.push(class.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateRecordTokenizable` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[writable, signer]` payer
///   2. `[writable]` record
///   3. `[]` system_program
///   4. `[optional]` class
#[derive(Clone, Debug)]
pub struct UpdateRecordTokenizableCpiBuilder<'a, 'b> {
    instruction: Box<UpdateRecordTokenizableCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateRecordTokenizableCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateRecordTokenizableCpiBuilderInstruction {
            __program: program,
            authority: None,
            payer: None,
            record: None,
            system_program: None,
            class: None,
            metadata: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Record owner or class authority for permissioned classes
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Account that will pay of get refunded for the record update
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// Record account to be updated
    #[inline(always)]
    pub fn record(&mut self, record: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.record = Some(record);
        self
    }
    /// System Program used to extend our record account
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// `[optional account]`
    /// Class account of the record
    #[inline(always)]
    pub fn class(&mut self, class: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
        self.instruction.class = class;
        self
    }
    #[inline(always)]
    pub fn metadata(&mut self, metadata: Metadata) -> &mut Self {
        self.instruction.metadata = Some(metadata);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = UpdateRecordTokenizableInstructionArgs {
            metadata: self
                .instruction
                .metadata
                .clone()
                .expect("metadata is not set"),
        };
        let instruction = UpdateRecordTokenizableCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            record: self.instruction.record.expect("record is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            class: self.instruction.class,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateRecordTokenizableCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    record: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    class: Option<&'b solana_account_info::AccountInfo<'a>>,
    metadata: Option<Metadata>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
